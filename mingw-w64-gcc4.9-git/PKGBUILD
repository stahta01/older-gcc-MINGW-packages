# Maintainer:  Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Alexey Borzenkov <snaury@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>

### Major build options
_include_sub_folder=/${MINGW_CHOST}
_enable_bootstrap=no           # Use yes for production
#options=('staticlibs' '!emptydirs' '!strip' 'debug')
options=('staticlibs' '!emptydirs' 'strip' '!debug')
_use_intree_gmp_mpfr_mpc=no     # yes had build error under MINGW64 GCC 5 and CRT 6
### Language build options
_enable_ada=yes                 # Use yes for production
_enable_fortran=no
_enable_objc=no
### build options not normally changed
_threads="win32"                # Use posix for production; and, win32 for development
_enable_libquadmath=no          # Use no for production
_enable_libgomp=yes             # Use yes for production
_enable_backstrapada=no         # Use no for production
#_try_to_use_static_libs=no      # Use no for production; yes had mpfr build errors
_enable_gcc_shared=yes          # Use yes for production

# =========================================== #
if [[ $MINGW_PACKAGE_PREFIX == *-ucrt-* && "$_enable_libgomp" == "yes" ]]; then
  _enable_libgomp=no
  warning "UCRT fails to build libgomp; so, libgomp was disabled"
fi
if [[ "$_enable_fortran" == "yes" && "$_enable_libquadmath" != "yes" ]]; then
  warning "when building FORTRAN; libquadmath is enabled"
  _enable_libquadmath=yes
fi
# =========================================== #

_realname=gcc
pkgbase=mingw-w64-${_realname}4.9
pkgname=(
  "${MINGW_PACKAGE_PREFIX}-${_realname}"
  $([[ "$_enable_gcc_shared" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-libs")
  $( [ "$_enable_gcc_shared" == "yes" ] && [ "$_enable_fortran" == "yes" ] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-libgfortran")
  $([[ "$_enable_fortran" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-fortran")
  $([[ "$_enable_ada" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-ada")
  $([[ "$_enable_objc" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-objc")
)
pkgver=4.9.2
pkgrel=7
_sourcedir=${_realname}-${pkgver}
pkgdesc="GCC for the MinGW-w64"
arch=('any')
url="http://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${MINGW_PACKAGE_PREFIX}-toolchain" "${MINGW_PACKAGE_PREFIX}")
depends=($([[ "$_enable_ada" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-ada")
         "${MINGW_PACKAGE_PREFIX}-binutils"
         "${MINGW_PACKAGE_PREFIX}-crt"
         "${MINGW_PACKAGE_PREFIX}-headers"
         "${MINGW_PACKAGE_PREFIX}-mpc"
         #"${MINGW_PACKAGE_PREFIX}-cloog"
         "${MINGW_PACKAGE_PREFIX}-windows-default-manifest"
         "${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("${MINGW_PACKAGE_PREFIX}-${_realname}"
             $([[ "$_threads" == "posix" ]] && echo "${MINGW_PACKAGE_PREFIX}-winpthreads") 
             'lndir')
#checkdepends=('dejagnu')
optdepends=()
CLOOG_VERSION=0.18.1
ISL_VERSION=0.16.1
MPFR_VERSION=3.1.6
GMP_VERSION=5.1.3
MPC_VERSION=1.1.0
noextract=("isl-${ISL_VERSION}.tar.bz2" "mpfr-${MPFR_VERSION}.tar.bz2"
           "cloog-${CLOOG_VERSION}.tar.gz"
           "gmp-${GMP_VERSION}.tar.xz" "mpc-${MPC_VERSION}.tar.gz")
# commit 4f18db57daffc62a373e30d93c9552f2b94adf09 (HEAD -> releases/gcc-4.9)
# commit c8be0366b55cdb3233abcf79abe2c5ddc6f82cb9 (tag: releases/gcc-4.9.2)
source=(https://libisl.sourceforge.io/isl-${ISL_VERSION}.tar.bz2
        ftp://gcc.gnu.org/pub/gcc/infrastructure/cloog-${CLOOG_VERSION}.tar.gz
        ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-${MPFR_VERSION}.tar.bz2
        https://gmplib.org/download/gmp-${GMP_VERSION}/gmp-${GMP_VERSION}.tar.xz
        https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VERSION}.tar.gz
        "ftp://gcc.gnu.org/pub/gcc/releases/${_sourcedir}/${_sourcedir}.tar.bz2"
        '000-relocatex-libintl-0.18.3.1.mingw.patch'
        '001-gcc-4.8-libstdc++export.patch'
        '002-gcc-4.7-stdthreads.patch'
        '130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch'
        '140-fix-for-windows-not-minding-non-existent-parent-dirs.patch'
        '150-windows-lrealpath-no-force-lowercase-nor-backslash.patch'
        '160-mingw-dont-ignore-native-system-header-dir.patch'
        '170-Add--mcrtdll-option-for-msvcrt-stubbing.patch'
        '180-pr-57440.patch'
        '190-isl-0.13.patch'
        '200-gcc-4.8-filename-output.patch'
        '210-ktietz-libgomp.patch'
        '220-4.9.0-libatomic-cygwin.patch'
        '230-build-more-gnattools.mingw.patch'
        '240-prettify-linking-no-undefined.mingw.patch'
        '250-mh-mingw-Also-set-__USE_MINGW_ACCESS-flag-for-C-cod.patch'
        '300-libgomp-no-static.patch'
        '137-gcc-4.9-Enable-shared-gnat-implib.patch'
        '903-Ada-build-fix-for-GCC-5-building-GCC-4.9.patch'
        '955-4.9.2-apply-hack-so-gcc_s-isnt-stripped.patch')
sha256sums=('412538bb65c799ac98e17e8cfcdacbb257a57362acfaaff254b0fcae970126d2'
            '02500a4edd14875f94fe84cbeda4290425cb0c1c2474c6f75d75a303d64b4196'
            'cf4f4b2d80abb79e820e78c8077b6725bbbb4e8f41896783c899087be0e94068'
            'dee2eda37f4ff541f30019932db0c37f6f77a30ba3609234933b1818f9b07071'
            '6985c538143c1208dcb1ac42cedad6ff52e267b47e5f970183a3e75125b43c2e'
            '2020c98295856aa13fda0f2f3a4794490757fc24bcca918d52cc8b4917b972dd'
            '164e6e90d9306d3da0f15d790a5e44fa87e1db043c4dc0bfaeb8ac1833b9fae0'
            '21191b4fd57ce5f230fcc97b4d9ae31bdc387d7c7c8e39436aa7e4268d278d3d'
            '5e0fc1437ce0b357e78d440692e3a30a7905a5f360a67928a95b14ec8d45365b'
            '800e81e4e6acb07f1b69cccc07a8dae8cdbf7c084ac00c8869e9b4cb205c655c'
            '74e3a5690f33b71399731a40b1a95fa1ec7275f156a55ee14e7a1eac1711129e'
            '0953d65d4fb3d681c76b6d6353e3cc424751a417872435f724d463001da66d43'
            'a7c5daced21086a01b3af9af4c46ee738ccfca6e67b3413771cb7ab81aa2a83f'
            '06406f513a5bfe15e1c469de0ef323524cdb94ad7cd85cb16b5c1494da4c6a08'
            '16cb29806dd252603d3b42913eba0cb1c59c22d2a3567d88b0d1446b139e531b'
            'ccf04015454bbb428c2752e5b479cbf22c97c32bcf9b2b766b1e84f546d30dcd'
            '9278e745190bac0b3f6ef74972aecd4e2891d4930f7b6fa8840c3d4f7fbf4f98'
            'f05fc823279d764e0e19c7721e34e2c969f1df4492398c9de1764a4ffdba809e'
            '20dfe3dc4e044ac702b9422ae715a10f4e46fdd03d38581aba12b86656823556'
            'd16e76e0aa9e5a1c239424edc3a6da52785e82849b6e00850f8e2526e7f496d9'
            'a101c40bd4bda743ee65691959e090a2ee6e01456c394a6f45c21f9a39849d5e'
            '8c72f2cf3a53603fd0ab4ff48ff7450330964786b09ed38c8ff1b6bcf2ad223d'
            '1422dccee79ead90dfc729e325074675758e642e38d4af6d0fc870b364c61a8e'
            '6db77e87ca3a7b43c7549b19cfd1364346107502d75d84a4e0c5c590a4cbe4b5'
            '3ceb659e23136616b48e9cde5a0d96063e050fa2579c5e6cec8709c6added327'
            '9893cd986191de2e761e2ed98ad6ec8fadeab86311dc6ba20a1032f13e478686')
# =========================================== #
# Helper macros to help make tasks easier     #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    else
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    fi
  done
}
del_file_exists() {
  for _fname in "$@"
  do
    if [ -f ${_fname} ]; then
      rm -rf ${_fname}
    fi
  done
}
_extract_to_gcc_folder() {
    local tarfile="$1"
    local subfolder="$(echo "$tarfile" | sed 's/-.*$//')"
    if [ ! -d  "$_sourcedir/$subfolder" ]; then
        echo "Extracting ${tarfile} to $_sourcedir/$subfolder"
        mkdir -p "$_sourcedir/$subfolder"
        tar -x --strip-components=1 -f "$tarfile" -C "$_sourcedir/$subfolder"
    else
        echo "Folder $_sourcedir/$subfolder already exists"
    fi
}
# =========================================== #

prepare() {
  cd ${srcdir}/${_sourcedir}

  #remove files the patches will create (so they aren't in the way the 2nd time round)
  rm -f intl/canonicalize.c intl/relocatex.c intl/relocatex.h > /dev/null 2>&1 || true

  patch -p1 -i ${srcdir}/000-relocatex-libintl-0.18.3.1.mingw.patch
  patch -p1 -i ${srcdir}/001-gcc-4.8-libstdc++export.patch
  patch -p1 -i ${srcdir}/002-gcc-4.7-stdthreads.patch

  # Don't waste valuable commandline chars on double-quotes around "arguments"
  #  that don't need them.
  patch -p1 -i ${srcdir}/130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch

  # Make Windows behave the same as Posix in the consideration of whether folder
  # "/exists/doesnt-exist/.." is a valid path.. in Posix, it isn't.
  patch -p1 -i ${srcdir}/140-fix-for-windows-not-minding-non-existent-parent-dirs.patch

  # Don't make a lowercase backslashed path from argv[0]
  #  that then fail to strcmp with prefix(es) .. they're also ugly.
  patch -p1 -i ${srcdir}/150-windows-lrealpath-no-force-lowercase-nor-backslash.patch

  # Don't ignore values passed via --with-native-system-header-dir=
  # patch -p1 -i ${srcdir}/160-mingw-dont-ignore-native-system-header-dir.patch

  # Feature to allow overriding -lmsvcrt with a custom msvcrt dll, for example
  # a stub implementation that defers to the one already loaded by the process.
  patch -p1 -i ${srcdir}/170-Add--mcrtdll-option-for-msvcrt-stubbing.patch

  patch -p1 -i ${srcdir}/180-pr-57440.patch

  # Compatibility with isl>=0.12.2
  patch -p0 -i ${srcdir}/190-isl-0.13.patch

  # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=57653
  patch -p0 -i ${srcdir}/200-gcc-4.8-filename-output.patch

  # Kai's libgomp fix.
  patch -p1 -i ${srcdir}/210-ktietz-libgomp.patch

  # Enable building libatomic
  patch -p2 -i ${srcdir}/220-4.9.0-libatomic-cygwin.patch

  # Build extra tools for Ada
  patch -p1 -i ${srcdir}/230-build-more-gnattools.mingw.patch

  patch -p1 -i ${srcdir}/240-prettify-linking-no-undefined.mingw.patch

  patch -p1 -i ${srcdir}/250-mh-mingw-Also-set-__USE_MINGW_ACCESS-flag-for-C-cod.patch

  patch -p1 -i ${srcdir}/137-gcc-4.9-Enable-shared-gnat-implib.patch

  patch -p1 -i ${srcdir}/955-4.9.2-apply-hack-so-gcc_s-isnt-stripped.patch

  #do not install libiberty
  sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in

  # hack! - some configure tests for header files using "$CPP $CPPFLAGS"
  sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {libiberty,gcc}/configure
}

build() {
  cd ${srcdir}

  if [[ $_use_intree_gmp_mpfr_mpc == "yes" ]]; then
    _extract_to_gcc_folder          mpfr-${MPFR_VERSION}.tar.bz2
    _extract_to_gcc_folder          gmp-${GMP_VERSION}.tar.xz
    _extract_to_gcc_folder          mpc-${MPC_VERSION}.tar.gz
  else
    rm -fr ${srcdir}/${_sourcedir}/mpfr
    rm -fr ${srcdir}/${_sourcedir}/gmp
    rm -fr ${srcdir}/${_sourcedir}/mpc
  fi

  rm -fr ${srcdir}/${_sourcedir}/isl
  rm -fr ${srcdir}/${_sourcedir}/cloog

  cd ${srcdir}/${_sourcedir}

  #gcc/ada/adaint.c
  #gcc/ada/gcc-interface/Make-lang.in
  #gcc/ada/gcc-interface/Makefile.in
  #gcc/ada/mingw32.h
  #create mode 100644 gcc/ada/rtfinal.c
  #create mode 100644 gcc/ada/rtinit.c
  if [[ "$_enable_ada" == "yes" && "$_enable_backstrapada" == "yes" ]]; then
    apply_patch_with_msg 903-Ada-build-fix-for-GCC-5-building-GCC-4.9.patch
  fi

  # do not expect $prefix/mingw symlink - this should be superceded by
  # 160-mingw-dont-ignore-native-system-header-dir.patch .. but isn't!
  if [ -f configure.sedbak ]; then
    cp configure.sedbak configure
  fi
  sed --in-place=.sedbak 's/${prefix}\/mingw\//${prefix}\//g' configure

  # change hardcoded /mingw prefix to the real prefix
  local MINGW_NATIVE_PREFIX=$(cygpath -am ${MINGW_PREFIX}${_include_sub_folder})
  if [ -f gcc/config/i386/mingw32.h.sedbak ]; then
    cp gcc/config/i386/mingw32.h.sedbak gcc/config/i386/mingw32.h
  fi
  sed --in-place=.sedbak "s/\\/mingw\\//${MINGW_NATIVE_PREFIX//\//\\/}\\//g" gcc/config/i386/mingw32.h

  declare -a extra_config
  extra_config+=('--without-isl')
  extra_config+=('disable-graphite')
  if [[ "$_enable_libquadmath" != "yes" ]]; then
    extra_config+=('--disable-libquadmath')
  fi
  #
  if [ "$_enable_libgomp" == "yes" ]; then
    extra_config+=("--enable-libgomp")
  elif [ "$_enable_libgomp" == "no" ]; then
    extra_config+=("--disable-libgomp")
  fi
  #
  if [[ "$_enable_bootstrap" == "yes" ]]; then
    extra_config+=("--enable-bootstrap")
  elif [[ "$_enable_bootstrap" == "no" ]]; then
    extra_config+=("--disable-bootstrap")
  fi
  #
  if [[ "$_enable_gcc_shared" == "yes" ]]; then
    extra_config+=("--enable-shared")
  elif [[ "$_enable_gcc_shared" == "no" ]]; then
    extra_config+=("--disable-shared")
  fi   

  # Replace the MSys2 FLAG values
  export LDFLAGS="-pipe"
  export CPPFLAGS=""
  #if [[ "$_try_to_use_static_libs" == "yes" ]]; then
    #export CFLAGS="-pipe -static"
    #export CXXFLAGS="-pipe -static" 
  #else
    export CFLAGS="-pipe"
    export CXXFLAGS="-pipe"
  #fi

  case "${CARCH}" in
    i686)
      local _conf="--disable-sjlj-exceptions --with-dwarf2"
      LDFLAGS+=" -Wl,--large-address-aware"
      local _arch=i686
    ;;

    x86_64)
      local _arch=x86-64
      local _conf=""
    ;;
  esac

  local _languages="c,lto,c++"
  if [ "$_enable_ada" == "yes" ]; then
    _languages+=",ada"
  fi
  if [ "$_enable_fortran" == "yes" ]; then
    _languages+=",fortran"
  fi
  if [ "$_enable_objc" == "yes" ]; then
    _languages+=",objc,obj-c++"
  fi

  [[ -d ${srcdir}/build-${MSYSTEM} ]] && rm -rf ${srcdir}/build-${MSYSTEM}
  mkdir -p ${srcdir}/build-${MSYSTEM} && cd ${srcdir}/build-${MSYSTEM}

  echo ""
  echo "CC [gcc] := ${CC-gcc}"
  ${CC-gcc} --version | head -1
  ${CC-gcc} --help | tail -1
  pacman -Q ${MINGW_PACKAGE_PREFIX}-headers
  pacman -Q ${MINGW_PACKAGE_PREFIX}-crt
  echo ""

  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --with-local-prefix=${MINGW_PREFIX}/local \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --with-native-system-header-dir=${MINGW_PREFIX}${_include_sub_folder}/include \
    --libexecdir=${MINGW_PREFIX}/lib \
    --with-gxx-include-dir=${MINGW_PREFIX}/include/c++/${pkgver%%+*} \
    --with-arch=${_arch} \
    --with-tune=generic \
    --enable-languages=${_languages} \
    --enable-shared --enable-static \
    --enable-libatomic \
    --enable-threads=${_threads} \
    --enable-fully-dynamic-string \
    --enable-libstdcxx-time=yes \
    --disable-libstdcxx-pch \
    --disable-libstdcxx-debug \
    --enable-version-specific-runtime-libs \
    "${extra_config[@]}" \
    --enable-lto \
    --disable-multilib \
    --enable-checking=release \
    --disable-rpath \
    --disable-win32-registry \
    --disable-nls \
    --disable-werror \
    --disable-symvers \
    --with-libiconv \
    --with-system-zlib \
    --with-{gmp,mpfr,mpc}=${MINGW_PREFIX} \
    --with-pkgversion="Rev${pkgrel} ${MSYSTEM}, Built by older-gcc-MINGW-packages project" \
    --with-bugurl="https://github.com/stahta01/older-gcc-MINGW-packages/issues" \
    --with-gnu-as --with-gnu-ld \
    ${_conf}
    #--enable-libitm
    #--enable-objc-gc

  ## While we're debugging -fopenmp problems at least.
  ## .. we may as well not strip anything.
  #if check_option "strip" "n"; then
    #sed -i 's,^STRIP = .*$,STRIP = true,g'                   Makefile
    #sed -i 's,^STRIP_FOR_TARGET=.*$,STRIP_FOR_TARGET=true,g' Makefile
  #fi

  make all

  make -j1 DESTDIR=${srcdir} install
  if [[ "$_enable_ada" == "yes" && "$_enable_gcc_shared" == "yes" ]]; then
    mv ${srcdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/adalib/*.dll ${srcdir}${MINGW_PREFIX}/bin/
  fi
}

package_mingw-w64-gcc-libs() {
  pkgdesc="GNU Compiler Collection (libraries) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-gmp")
  if [[ "$_threads" == "posix" ]]; then
     depends+=("${MINGW_PACKAGE_PREFIX}-libwinpthread")
  fi

  # Licensing information

  # Part of the package is GCCRLE, part is LGPL2+, see README generation below.
  # Since the packaged GCCRLE libraries are also GPL3+, and LGPL2+ is compatible
  # with GPL3+, the whole package can be redistributed under GPL3+.
  license=(GPL3+ partial:'GCCRLE' partial:'LGPL2+')

  # We explain the licensing in this generated README file
  mkdir -p "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}-libs"
  cat << ENDFILE > "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}-libs/README"
The libgcc, libssp, libstdc++, libgomp and libatomic libraries are covered by
GPL3+ with the GCC Runtime Library Exception. The libquadmath library is covered
by LGPL2+. The package as a whole can be redistributed under GPL3+.
ENDFILE

  # License files
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING3"        "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}-libs/COPYING3"
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING.LIB"     "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}-libs/COPYING.LIB"
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING.RUNTIME" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}-libs/COPYING.RUNTIME"

  mkdir -p ${pkgdir}${MINGW_PREFIX}/bin

  cd ${srcdir}${MINGW_PREFIX}
  cp bin/{libatomic*,libgcc*,libgomp*,libssp*,libstdc*}.dll ${pkgdir}${MINGW_PREFIX}/bin/
  if [[ "$_enable_libquadmath" == "yes" ]]; then
    cp bin/libquadmath*.dll ${pkgdir}${MINGW_PREFIX}/bin/
  fi
}

package_mingw-w64-gcc() {
  pkgdesc="GNU Compiler Collection (C,C++,OpenMP) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-crt" "${MINGW_PACKAGE_PREFIX}-binutils"
           "${MINGW_PACKAGE_PREFIX}-headers" "${MINGW_PACKAGE_PREFIX}-zlib" "${MINGW_PACKAGE_PREFIX}-mpc")
           #"${MINGW_PACKAGE_PREFIX}-cloog"
  if [[ "$_enable_gcc_shared" == "yes" ]]; then
     depends+=("${MINGW_PACKAGE_PREFIX}-${_realname}-libs=${pkgver}")
  fi
  if [[ "$_threads" == "posix" ]]; then
     depends+=("${MINGW_PACKAGE_PREFIX}-winpthreads")
  fi
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}-base")
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}-base")

  mkdir -p ${pkgdir}${MINGW_PREFIX}/{bin,include,lib,share}

  cd ${srcdir}${MINGW_PREFIX}
  cp bin/cpp.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcc.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcc-ar.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcc-nm.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcc-ranlib.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/gcov.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/c++.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/g++.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-c++.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-g++.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc-${pkgver%%+*}.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc-ar.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc-nm.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc-ranlib.exe ${pkgdir}${MINGW_PREFIX}/bin/

  #cp bin/{libgcc*,libgomp*,libquadmath*,libssp*,libstdc*}.dll ${pkgdir}${MINGW_PREFIX}/bin/
  mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/*.h ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/ssp ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include-fixed ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/install-tools ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1.exe ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/collect2.exe ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/crt*.o ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/liblto* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libatomic* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libgcc* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libgcov.* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libgomp.* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  if [[ "$_enable_libquadmath" == "yes" ]]; then
    cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libquadmath.* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libssp* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/lto*.exe ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/

  #mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/lib
  cp ${srcdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/lib/libgcc_s.a ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  #cp lib/gcc/${MINGW_CHOST}/lib/libgcc_s.a ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/lib/

  #cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/c++ ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/
  cp -r include/c++ ${pkgdir}${MINGW_PREFIX}/include/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1plus.exe ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libstdc++* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libsupc++* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/

  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/{doc,info,locale,man}
  #cp -r share/doc/gcc-${pkgver%%+*} ${pkgdir}${MINGW_PREFIX}/share/doc/
  cp share/info/cpp.info* ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/cppinternals.info* ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gcc.info* ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gccinstall.info* ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gccint.info* ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/libgomp.info* ${pkgdir}${MINGW_PREFIX}/share/info/
  if [[ "$_enable_libquadmath" == "yes" ]]; then
    cp share/info/libquadmath.info* ${pkgdir}${MINGW_PREFIX}/share/info/
  fi

  #cp share/locale/* ${pkgdir}${MINGW_PREFIX}/share/locale/
  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/gcc-${pkgver%%+*}/python
  cp -r share/gcc-${pkgver%%+*}/python/libstdcxx  ${pkgdir}${MINGW_PREFIX}/share/gcc-${pkgver%%+*}/python/
  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/man/man1
  cp share/man/man1/cpp.1* ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man1/gcc.1* ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man1/gcov.1* ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man7/fsf-funding.7* ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man7/gfdl.7* ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man7/gpl.7* ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  cp share/man/man1/g++.1* ${pkgdir}${MINGW_PREFIX}/share/man/man1/
}

package_mingw-w64-gcc-libgfortran() {
  pkgdesc="GNU Compiler Collection (libgfortran) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}-libs=${pkgver}")

  mkdir -p ${pkgdir}${MINGW_PREFIX}/bin
  cd ${srcdir}${MINGW_PREFIX}
  cp bin/libgfortran*.dll ${pkgdir}${MINGW_PREFIX}/bin/
}

package_mingw-w64-gcc-fortran() {
  pkgdesc="GNU Compiler Collection (Fortran) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}=${pkgver}")
  if [[ "$_enable_gcc_shared" == "yes" ]]; then
     depends+=("${MINGW_PACKAGE_PREFIX}-${_realname}-libgfortran=${pkgver}")
  fi

  mkdir -p ${pkgdir}${MINGW_PREFIX}/{bin,lib,share}

  cd ${srcdir}${MINGW_PREFIX}
  cp bin/gfortran.exe ${pkgdir}${MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gfortran.exe ${pkgdir}${MINGW_PREFIX}/bin/

  #cp bin/libgfortran*.dll ${pkgdir}${MINGW_PREFIX}/bin/

  mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/finclude  ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/f951.exe  ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libcaf_single.a  ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libgfortran*  ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/man/man1
  cp share/man/man1/gfortran.1* ${pkgdir}${MINGW_PREFIX}/share/man/man1/
  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/info
  cp share/info/gfortran.info* ${pkgdir}${MINGW_PREFIX}/share/info/
}

package_mingw-w64-gcc-ada() {
  pkgdesc="GNU Compiler Collection (Ada) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}=${pkgver}")

  mkdir -p ${pkgdir}${MINGW_PREFIX}/{bin,lib,share}

  cd ${srcdir}${MINGW_PREFIX}
  cp bin/gnat*.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatbind.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatchop.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatclean.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatdll.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatfind.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatkr.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatlink.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatls.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatmake.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatname.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatprep.exe ${pkgdir}${MINGW_PREFIX}/bin/
  # cp bin/gnatxref.exe ${pkgdir}${MINGW_PREFIX}/bin/

  cp bin/{libgnarl*,libgnat*}.dll ${pkgdir}${MINGW_PREFIX}/bin/
  mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/adalib

  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/adainclude ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/adalib ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/gnat1.exe ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/

  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/info
  cp share/info/gnat-style.info* ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gnat_rm.info* ${pkgdir}${MINGW_PREFIX}/share/info/
  cp share/info/gnat_ugn.info* ${pkgdir}${MINGW_PREFIX}/share/info/
}

package_mingw-w64-gcc-objc() {
  pkgdesc="GNU Compiler Collection (ObjC,Obj-C++) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}=${pkgver}")

  mkdir -p ${pkgdir}${MINGW_PREFIX}/{bin,lib}

  cd ${srcdir}${MINGW_PREFIX}
  cp bin/libobjc*.dll ${pkgdir}${MINGW_PREFIX}/bin/

  mkdir -p ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/objc ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1obj.exe ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libobjc.* ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1objplus.exe ${pkgdir}${MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
}

# Wrappers for package functions

# 32-bit wrappers
package_mingw-w64-i686-gcc-libs() {
  package_mingw-w64-gcc-libs
}

package_mingw-w64-i686-gcc() {
  package_mingw-w64-gcc
}

package_mingw-w64-i686-gcc-libgfortran() {
  package_mingw-w64-gcc-libgfortran
}

package_mingw-w64-i686-gcc-fortran() {
  package_mingw-w64-gcc-fortran
}

package_mingw-w64-i686-gcc-ada() {
  package_mingw-w64-gcc-ada
}

package_mingw-w64-i686-gcc-objc() {
  package_mingw-w64-gcc-objc
}

# 64-bit wrappers
package_mingw-w64-x86_64-gcc-libs() {
  package_mingw-w64-gcc-libs
}

package_mingw-w64-x86_64-gcc() {
  package_mingw-w64-gcc
}

package_mingw-w64-x86_64-gcc-libgfortran() {
  package_mingw-w64-gcc-libgfortran
}

package_mingw-w64-x86_64-gcc-fortran() {
  package_mingw-w64-gcc-fortran
}

package_mingw-w64-x86_64-gcc-ada() {
  package_mingw-w64-gcc-ada
}

package_mingw-w64-x86_64-gcc-objc() {
  package_mingw-w64-gcc-objc
}

# UCRT 64-bit wrappers
package_mingw-w64-ucrt-x86_64-gcc-libs() {
  package_mingw-w64-gcc-libs
}

package_mingw-w64-ucrt-x86_64-gcc() {
  package_mingw-w64-gcc
}

package_mingw-w64-ucrt-x86_64-gcc-libgfortran() {
  package_mingw-w64-gcc-libgfortran
}

package_mingw-w64-ucrt-x86_64-gcc-fortran() {
  package_mingw-w64-gcc-fortran
}

package_mingw-w64-ucrt-x86_64-gcc-ada() {
  package_mingw-w64-gcc-ada
}

package_mingw-w64-ucrt-x86_64-gcc-objc() {
  package_mingw-w64-gcc-objc
}
